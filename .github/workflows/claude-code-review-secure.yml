name: Claude Code Review - Secure Analysis

on:
  workflow_run:
    workflows: ["Claude Code Review - Collect PR Data"]
    types: [completed]

jobs:
  secure-review:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      actions: read

    steps:
      - name: Download and extract PR artifacts
        id: download
        run: |
          # Get artifacts from the workflow run
          ARTIFACTS=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts)
          ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[0].id')
          ARTIFACT_NAME=$(echo "$ARTIFACTS" | jq -r '.artifacts[0].name')

          echo "Downloading artifact: $ARTIFACT_NAME (ID: $ARTIFACT_ID)"

          # Download the artifact
          gh api repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip > artifact.zip

          # Extract it
          unzip -q artifact.zip

          # Read PR info
          if [ -f pr-info.txt ]; then
            echo "=== PR Info ==="
            cat pr-info.txt
            PR_NUM=$(grep "PR Number:" pr-info.txt | cut -d' ' -f3)
            echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT
            echo "Found PR number: $PR_NUM"
          else
            echo "ERROR: pr-info.txt not found"
            exit 1
          fi

          # Check diff file
          if [ -f pr.diff ]; then
            echo "Diff file size: $(wc -l < pr.diff) lines"
          else
            echo "ERROR: pr.diff not found"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ steps.download.outputs.pr_number }}

            A PR diff file has been provided at: pr.diff

            Please review this pull request diff and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Use the repository's CLAUDE.md for guidance on style and conventions. Be constructive and helpful in your feedback.

            IMPORTANT: Do not execute any code from the PR. Only analyze the diff file.
            Use `gh pr comment` with your Bash tool to leave your review as a comment on the PR.

          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          claude_args: '--allowed-tools "Bash(gh pr comment:*),Bash(gh pr view:*),Bash(cat:pr.diff),Bash(cat:pr-info.txt)"'

      - name: Check for benchmark results
        id: benchmark
        continue-on-error: true
        run: |
          PR_NUM="${{ steps.download.outputs.pr_number }}"

          # Look for benchmark artifacts from the CI workflow
          echo "Looking for benchmark artifacts for PR #$PR_NUM..."

          # Get all workflow runs for this PR
          RUNS=$(gh api "repos/${{ github.repository }}/actions/runs?event=pull_request&status=completed" \
            --jq ".workflow_runs[] | select(.head_sha == \"${{ github.event.workflow_run.head_sha }}\") | .id")

          BENCHMARK_FOUND=false
          for RUN_ID in $RUNS; do
            echo "Checking run $RUN_ID for benchmark artifacts..."

            # Check if this run has benchmark artifacts
            ARTIFACTS=$(gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts" \
              --jq ".artifacts[] | select(.name | startswith(\"benchmark-results-pr-\"))")

            if [ -n "$ARTIFACTS" ]; then
              echo "Found benchmark artifacts in run $RUN_ID"
              ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.id' | head -1)

              # Download benchmark artifact
              gh api "repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip" > benchmark.zip
              unzip -q benchmark.zip -d benchmark-results

              BENCHMARK_FOUND=true
              break
            fi
          done

          if [ "$BENCHMARK_FOUND" = true ]; then
            echo "has_benchmark=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Benchmark results found and downloaded"
          else
            echo "has_benchmark=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No benchmark results found for this PR"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post benchmark results to PR
        if: steps.benchmark.outputs.has_benchmark == 'true'
        run: |
          PR_NUM="${{ steps.download.outputs.pr_number }}"

          # Find the benchmark markdown file
          BENCHMARK_FILE=$(find benchmark-results -name "*-report-github.md" -type f | head -1)

          if [ -n "$BENCHMARK_FILE" ] && [ -f "$BENCHMARK_FILE" ]; then
            echo "Found benchmark report: $BENCHMARK_FILE"

            # Create formatted comment
            {
              echo "## üìä Benchmark Results"
              echo ""
              echo "<details>"
              echo "<summary>Click to expand benchmark results</summary>"
              echo ""
              cat "$BENCHMARK_FILE"
              echo ""
              echo "</details>"
              echo ""
              echo "---"
              echo "*Benchmark generated automatically on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*"
            } > benchmark_comment.md

            # Post to PR
            gh pr comment "$PR_NUM" --body-file benchmark_comment.md
            echo "‚úÖ Benchmark results posted to PR #$PR_NUM"
          else
            echo "‚ö†Ô∏è Benchmark markdown file not found in downloaded artifacts"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
