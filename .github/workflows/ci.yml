name: CI - Build and Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_call:

# Security: Minimal required permissions
permissions:
  contents: read        # Read repository contents
  actions: write        # Upload artifacts
  pull-requests: read   # Read PR context
  checks: write         # Write test results

# Prevent concurrent runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set global defaults
defaults:
  run:
    working-directory: ./src

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            ${{ vars.DOTNET_VERSION || '8.0.x' }}
            8.0.x
            6.0.x
            2.1.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Debug

      - name: Copy DLLs for Unity tests
        run: |
          cp ./Nino/bin/Debug/netstandard2.1/Nino.Core.dll ./Nino.Unity/Packages/com.jasonxudeveloper.nino/Runtime/Nino.Core.dll
          cp ./Nino/bin/Debug/netstandard2.1/Nino.Generator.dll ./Nino.Unity/Packages/com.jasonxudeveloper.nino/Runtime/Nino.Generator.dll

      - name: Run unit tests
        run: dotnet test --no-build --verbosity normal --configuration Debug --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: src/Nino.Unity/Library
          key: Library-Nino-${{ runner.os }}-${{ hashFiles('Nino.Unity/Assets/**', 'Nino.Unity/ProjectSettings/**') }}
          restore-keys: |
            Library-Nino-${{ runner.os }}-
            Library-Nino-
            Library-

      - name: Run Unity tests
        uses: game-ci/unity-test-runner@v4
        id: unity-tests
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          projectPath: ./src/Nino.Unity
          testMode: editmode
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          unityVersion: '2022.3.51f1'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            artifacts
            ./src/TestResults
          retention-days: 30

      - name: Upload Unity coverage
        uses: actions/upload-artifact@v4
        if: always() && steps.unity-tests.outputs.coveragePath
        with:
          name: unity-coverage-${{ github.run_number }}
          path: ${{ steps.unity-tests.outputs.coveragePath }}
          retention-days: 30

  # Run benchmarks on main branch pushes (not PRs)
  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    needs: [ build-test ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 60
    
    defaults:
      run:
        working-directory: ./src
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            ${{ vars.DOTNET_VERSION || '8.0.x' }}
            8.0.x
            6.0.x
            2.1.x

      - name: Setup R for benchmark plots
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.2'
        continue-on-error: true
        id: setup_r

      - name: Cache R packages
        if: steps.setup_r.outcome == 'success'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/renv
          key: ${{ runner.os }}-renv-${{ hashFiles('**/.Rprofile') }}
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install R dependencies for plots
        if: steps.setup_r.outcome == 'success'
        run: |
          # Install required R packages for BenchmarkDotNet plots
          Rscript -e "
            if (!require('ggplot2', quietly = TRUE)) install.packages('ggplot2', repos = 'https://cran.rstudio.com/')
            if (!require('dplyr', quietly = TRUE)) install.packages('dplyr', repos = 'https://cran.rstudio.com/')
            if (!require('plotly', quietly = TRUE)) install.packages('plotly', repos = 'https://cran.rstudio.com/')
            cat('R packages installed successfully\\n')
          "
        continue-on-error: true
        id: install_r_packages

      - name: Run benchmarks
        run: |
          cd Nino.Benchmark
          echo "Running benchmarks with R plot generation..."
          
          # Check R environment status
          if [[ "${{ steps.setup_r.outcome }}" == "success" && "${{ steps.install_r_packages.outcome }}" == "success" ]]; then
            echo "✅ R environment available - plots will be generated"
          else
            echo "⚠️ R environment not available - continuing without plots"
          fi
          
          dotnet run -c Release

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: src/Nino.Benchmark/**/BenchmarkDotNet.Artifacts/results
          retention-days: 30
