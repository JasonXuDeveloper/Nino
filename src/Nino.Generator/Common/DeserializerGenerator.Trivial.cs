using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Nino.Generator.Metadata;

namespace Nino.Generator.Common;

public partial class DeserializerGenerator
{
    private void GenerateTrivialCode(SourceProductionContext spc, HashSet<ITypeSymbol> generatedTypes)
    {
        var compilation = Compilation;
        var sb = new StringBuilder();
        sb.GenerateClassDeserializeMethods("string");
        HashSet<string> generatedTypeNames = new();

        foreach (var ninoType in NinoTypes)
        {
            try
            {
                if (!generatedTypes.Add(ninoType.TypeSymbol))
                    continue;
                if (!generatedTypeNames.Add(ninoType.TypeSymbol.GetDisplayString()))
                    continue;

                if (!ninoType.TypeSymbol.IsSealedOrStruct())
                {
                    sb.AppendLine();
                    GeneratePolymorphicDeserializers(spc, sb, ninoType, "        ");
                    sb.AppendLine();
                }

                if (!ninoType.TypeSymbol.IsInstanceType() ||
                    !string.IsNullOrEmpty(ninoType.CustomDeserializer))
                    continue;
                sb.AppendLine();
                GenerateImpl(spc, sb, ninoType, false);
                sb.AppendLine();
                GenerateImpl(spc, sb, ninoType, true);
                sb.AppendLine();
            }
            catch (Exception e)
            {
                sb.AppendLine($"/* Error: {e.Message} for type {ninoType.TypeSymbol.GetTypeFullName()}");
                //add stacktrace
                foreach (var line in e.StackTrace.Split('\n'))
                {
                    sb.AppendLine($" * {line}");
                }

                //end error
                sb.AppendLine(" */");
            }
        }

        var curNamespace = compilation.AssemblyName!.GetNamespace();

        // Collect all custom formatters for static field generation
        var globalCustomFormatters = CollectGlobalCustomFormatters();
        var staticFormatterFields = GenerateStaticFormatterFields(globalCustomFormatters);

        // generate code
        var code = $$"""
                     // <auto-generated/>

                     using System;
                     using global::Nino.Core;
                     using System.Buffers;
                     using System.ComponentModel;
                     using System.Collections.Generic;
                     using System.Collections.Concurrent;
                     using System.Runtime.InteropServices;
                     using System.Runtime.CompilerServices;

                     namespace {{curNamespace}}
                     {
                         public static partial class Deserializer
                         {{{staticFormatterFields}}
                     {{GeneratePrivateDeserializeImplMethodBody("string", "        ")}}
                             
                     {{sb}}    }
                     }
                     """;

        spc.AddSource($"{curNamespace}.Deserializer.g.cs", code);
    }

    private void GeneratePolymorphicDeserializers(SourceProductionContext spc, StringBuilder sb, NinoType ninoType,
        string indent = "")
    {
        var typeFullName = ninoType.TypeSymbol.GetTypeFullName();
        var bodyIndent = indent + "    ";

        // Generate DeserializePolymorphic (out version)
        sb.AppendLine($$"""
                        {{indent}}[MethodImpl(MethodImplOptions.AggressiveInlining)]
                        {{indent}}public static void DeserializePolymorphic(out {{typeFullName}} value, ref Reader reader)
                        {{indent}}{
                        {{indent}}        reader.Peak(out int typeId);
                        {{indent}}        switch(typeId)
                        {{indent}}        {
                        {{indent}}            case TypeCollector.Null:
                        {{indent}}            {
                        {{indent}}                value = default;
                        {{indent}}                reader.Advance(4);
                        {{indent}}                return;
                        {{indent}}            }
                        """);

        if (NinoGraph.SubTypes.TryGetValue(ninoType, out var subTypes))
        {
            foreach (var subType in subTypes)
            {
                if (!subType.TypeSymbol.IsInstanceType())
                    continue;

                sb.AppendLine($$"""
                                {{indent}}            case NinoTypeConst.{{subType.TypeSymbol.GetTypeFullName().GetTypeConstName()}}:
                                {{indent}}            {
                                {{indent}}                reader.Advance(4);
                                {{indent}}                {{subType.TypeSymbol.GetTypeFullName()}} subValue;
                                """);
                EmitImplBody(sb, subType, false, spc, "subValue", bodyIndent);
                sb.AppendLine($$"""
                                {{indent}}                value = subValue;
                                {{indent}}                return;
                                {{indent}}            }
                                """);
            }
        }

        sb.AppendLine($$"""
                        {{indent}}            default:
                        {{indent}}            {
                        {{indent}}                CachedDeserializer<{{typeFullName}}>.DeserializePolymorphic(out value, ref reader);
                        {{indent}}                return;
                        {{indent}}            }
                        {{indent}}        }
                        {{indent}}}
                        """);

        sb.AppendLine();

        // Generate DeserializeRefPolymorphic (ref version)
        sb.AppendLine($$"""
                        {{indent}}[MethodImpl(MethodImplOptions.AggressiveInlining)]
                        {{indent}}public static void DeserializeRefPolymorphic(ref {{typeFullName}} value, ref Reader reader)
                        {{indent}}{
                        {{indent}}        reader.Peak(out int typeId);
                        {{indent}}        switch(typeId)
                        {{indent}}        {
                        {{indent}}            case TypeCollector.Null:
                        {{indent}}            {
                        {{indent}}                value = default;
                        {{indent}}                reader.Advance(4);
                        {{indent}}                return;
                        {{indent}}            }
                        """);

        if (NinoGraph.SubTypes.TryGetValue(ninoType, out subTypes))
        {
            foreach (var subType in subTypes)
            {
                if (!subType.TypeSymbol.IsInstanceType())
                    continue;

                if (subType.TypeSymbol.IsValueType)
                {
                    sb.AppendLine($$"""
                                    {{indent}}            case NinoTypeConst.{{subType.TypeSymbol.GetTypeFullName().GetTypeConstName()}}:
                                    {{indent}}            {
                                    {{indent}}                reader.Advance(4);
                                    {{indent}}                {{subType.TypeSymbol.GetTypeFullName()}} subValue;
                                    """);
                    EmitImplBody(sb, subType, false, spc, "subValue", bodyIndent);
                    sb.AppendLine($$"""
                                    {{indent}}                value = subValue;
                                    {{indent}}                return;
                                    {{indent}}            }
                                    """);
                }
                else
                {
                    sb.AppendLine($$"""
                                    {{indent}}            case NinoTypeConst.{{subType.TypeSymbol.GetTypeFullName().GetTypeConstName()}}:
                                    {{indent}}            {
                                    {{indent}}                reader.Advance(4);
                                    {{indent}}                if (value is {{subType.TypeSymbol.GetTypeFullName()}} typedValue)
                                    {{indent}}                {
                                    """);
                    EmitImplBody(sb, subType, true, spc, "typedValue", bodyIndent);
                    sb.AppendLine($$"""
                                    {{indent}}                    value = typedValue;
                                    {{indent}}                }
                                    {{indent}}                else
                                    {{indent}}                {
                                    {{indent}}                    {{subType.TypeSymbol.GetTypeFullName()}} subValue;
                                    """);
                    EmitImplBody(sb, subType, false, spc, "subValue", bodyIndent);
                    sb.AppendLine($$"""
                                    {{indent}}                    value = subValue;
                                    {{indent}}                }
                                    {{indent}}                return;
                                    {{indent}}            }
                                    """);
                }
            }
        }

        sb.AppendLine($$"""
                        {{indent}}            default:
                        {{indent}}            {
                        {{indent}}                CachedDeserializer<{{typeFullName}}>.DeserializeRefPolymorphic(ref value, ref reader);
                        {{indent}}                return;
                        {{indent}}            }
                        {{indent}}        }
                        {{indent}}}
                        """);
    }

    private void GenerateImpl(SourceProductionContext spc, StringBuilder sb, NinoType ninoType, bool byRef)
    {
        string decl = byRef ? "ref" : "out";
        string suffix = byRef ? "Ref" : "";

        sb.AppendLine($$"""
                                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                public static void DeserializeImpl{{suffix}}({{decl}} {{ninoType.TypeSymbol.GetTypeFullName()}} value, ref Reader reader)
                                {
                                #if {{NinoTypeHelper.WeakVersionToleranceSymbol}}
                                   if (reader.Eof)
                                   {
                                      value = default;
                                      return;
                                   }
                                #endif
                        """);

        if (ninoType.IsPolymorphic())
        {
            sb.AppendLine("            reader.Read(out int typeId);");
            sb.AppendLine("            if(typeId == TypeCollector.Null)");
            sb.AppendLine("            {");
            sb.AppendLine("                value = default;");
            sb.AppendLine("                return;");
            sb.AppendLine("            }");
            sb.AppendLine(
                $"            else if(typeId != NinoTypeConst.{ninoType.TypeSymbol.GetTypeFullName().GetTypeConstName()})");
            sb.AppendLine("                throw new InvalidOperationException(\"Invalid type id\");");
            sb.AppendLine();
        }

        EmitImplBody(sb, ninoType, byRef, spc, "value");
        sb.AppendLine("        }");
    }

    private void EmitImplBody(StringBuilder sb, NinoType ninoType, bool byRef, SourceProductionContext spc,
        string valName, string indent = "")
    {
        if (ninoType.TypeSymbol.IsUnmanagedType)
        {
            // Even for unmanaged types, we need version tolerance
            sb.AppendLine($"{indent}#if {NinoTypeHelper.WeakVersionToleranceSymbol}");
            sb.AppendLine($"{indent}            if (!reader.Eof)");
            sb.AppendLine($"{indent}            {{");
            sb.AppendLine($"{indent}                reader.UnsafeRead(out {valName});");
            sb.AppendLine($"{indent}            }}");
            sb.AppendLine($"{indent}            else");
            sb.AppendLine($"{indent}            {{");
            sb.AppendLine($"{indent}                {valName} = default;");
            sb.AppendLine($"{indent}            }}");
            sb.AppendLine($"{indent}#else");
            sb.AppendLine($"{indent}            reader.UnsafeRead(out {valName});");
            sb.AppendLine($"{indent}#endif");
        }
        else
        {
            CreateInstance(spc, sb, ninoType, valName, byRef, indent);
        }
    }

    // Helper: Generate read statement based on type kind
    private string GenerateReadStatement(NinoMember member, string tempName,
        Func<ITypeSymbol, string> getDeserializerVar,
        Dictionary<NinoMember, string> customFormatterVars,
        NinoType nt,
        SourceProductionContext spc)
    {
        var declaredType = member.Type;

        if (member.HasCustomFormatter())
        {
            // PRIORITY 1: Custom formatter (highest priority)
            if (customFormatterVars.TryGetValue(member, out var formatterVar))
            {
                return $"{formatterVar}.Deserialize(out {tempName}, ref reader);";
            }
        }

        var kind = declaredType.GetKind(NinoGraph, GeneratedBuiltInTypes);

        switch (kind)
        {
            case NinoTypeHelper.NinoTypeKind.Unmanaged:
                // PRIORITY 2: Unmanaged types - direct read
                return $"reader.UnsafeRead(out {tempName});";

            case NinoTypeHelper.NinoTypeKind.Boxed:
                // PRIORITY 3: Object type - use polymorphic deserialization
                return $"{tempName} = NinoDeserializer.DeserializeBoxed(ref reader, null);";

            case NinoTypeHelper.NinoTypeKind.BuiltIn:
                // PRIORITY 4: String types or built-in types
                if (declaredType.SpecialType == SpecialType.System_String)
                {
                    return member.IsUtf8String
                        ? $"reader.ReadUtf8(out {tempName});"
                        : $"reader.Read(out {tempName});";
                }
                else
                {
                    return $"Deserializer.Deserialize(out {tempName}, ref reader);";
                }

            case NinoTypeHelper.NinoTypeKind.NinoType:
                // PRIORITY 5: NinoType - use CachedDeserializer
                if (TryGetInlineDeserializeCall(declaredType, false, tempName, out var inlineCall))
                    return $"{inlineCall};";

                var deserializerVar = getDeserializerVar(declaredType);
                return $"{deserializerVar}.Deserialize(out {tempName}, ref reader);";

            default:
                // PRIORITY 6: Invalid/unrecognizable type - report warning
                // Only report the warning once to avoid duplicates between serializer and deserializer
                if (!member.HasReportedUnrecognizableTypeWarning)
                {
                    // Check if member is from current compilation to determine location
                    var memberAssembly = member.MemberSymbol.ContainingType.ContainingAssembly;
                    var isCurrentAssembly = SymbolEqualityComparer.Default.Equals(memberAssembly, Compilation.Assembly);
                    var diagnosticLocation = isCurrentAssembly
                        ? (member.MemberSymbol.Locations.FirstOrDefault() ?? nt.TypeSymbol.Locations.FirstOrDefault() ?? Location.None)
                        : Location.None;

                    spc.ReportDiagnostic(Diagnostic.Create(
                        new DiagnosticDescriptor("NINO011",
                            "Member type cannot be serialized",
                            "Member '{0}' of type '{1}' in NinoType '{2}' has an unrecognizable type and will be skipped during serialization/deserialization",
                            "Nino",
                            DiagnosticSeverity.Warning, true),
                        diagnosticLocation,
                        member.Name,
                        declaredType.GetDisplayString(),
                        nt.TypeSymbol.GetDisplayString()));
                    member.HasReportedUnrecognizableTypeWarning = true;
                }
                return $"// WARNING: Unable to deserialize {tempName} (unrecognizable type '{declaredType.GetDisplayString()}')";
        }
    }

    // Helper: Generate ref deserialization for public fields
    private void GenerateRefDeserializePublicField(StringBuilder sb, NinoMember member,
        string valName, Func<ITypeSymbol, string> getDeserializerVar,
        Dictionary<NinoMember, string> customFormatterVars, string indent = "")
    {
        var declaredType = member.Type;
        var name = member.Name;

        if (member.HasCustomFormatter())
        {
            // PRIORITY 1: Custom formatter (highest priority)
            if (customFormatterVars.TryGetValue(member, out var formatterVar))
            {
                if (declaredType.IsValueType)
                {
                    sb.AppendLine($"{indent}            {formatterVar}.DeserializeRef(ref {valName}.{name}, ref reader);");
                }
                else
                {
                    sb.AppendLine($"{indent}            if ({valName}.{name} != null)");
                    sb.AppendLine($"{indent}            {{");
                    sb.AppendLine($"{indent}                {formatterVar}.DeserializeRef(ref {valName}.{name}, ref reader);");
                    sb.AppendLine($"{indent}            }}");
                    sb.AppendLine($"{indent}            else");
                    sb.AppendLine($"{indent}            {{");
                    sb.AppendLine($"{indent}                {formatterVar}.Deserialize(out {valName}.{name}, ref reader);");
                    sb.AppendLine($"{indent}            }}");
                }

                return;
            }
        }

        var kind = declaredType.GetKind(NinoGraph, GeneratedBuiltInTypes);

        switch (kind)
        {
            case NinoTypeHelper.NinoTypeKind.Unmanaged:
                sb.AppendLine($"{indent}            reader.UnsafeRead(out {valName}.{name});");
                break;

            case NinoTypeHelper.NinoTypeKind.Boxed:
                sb.AppendLine(
                    $"{indent}            NinoDeserializer.DeserializeRefBoxed(ref {valName}.{name}, ref reader, null);");
                break;

            case NinoTypeHelper.NinoTypeKind.BuiltIn:
                if (declaredType.SpecialType == SpecialType.System_String)
                {
                    if (member.IsUtf8String)
                        sb.AppendLine($"{indent}            reader.ReadUtf8(out {valName}.{name});");
                    else
                        sb.AppendLine($"{indent}            reader.Read(out {valName}.{name});");
                }
                else
                {
                    sb.AppendLine($"{indent}            Deserializer.DeserializeRef(ref {valName}.{name}, ref reader);");
                }

                break;

            case NinoTypeHelper.NinoTypeKind.NinoType:
                var deserializerVar = getDeserializerVar(declaredType);
                if (declaredType.IsValueType)
                {
                    if (TryGetInlineDeserializeCall(declaredType, true, $"{valName}.{name}", out var inlineRefCall))
                    {
                        sb.AppendLine($"{indent}            {inlineRefCall};");
                    }
                    else
                    {
                        sb.AppendLine(
                            $"{indent}            {deserializerVar}.DeserializeRef(ref {valName}.{name}, ref reader);");
                    }
                }
                else
                {
                    var inlineRefCall =
                        TryGetInlineDeserializeCall(declaredType, true, $"{valName}.{name}", out var inlineRef)
                            ? inlineRef
                            : null;
                    var inlineOutCall =
                        TryGetInlineDeserializeCall(declaredType, false, $"{valName}.{name}", out var inlineOut)
                            ? inlineOut
                            : null;
                    sb.AppendLine($"{indent}            if ({valName}.{name} != null)");
                    sb.AppendLine($"{indent}            {{");
                    var refCall = inlineRefCall ??
                                  $"{deserializerVar}.DeserializeRef(ref {valName}.{name}, ref reader)";
                    sb.AppendLine($"{indent}                {refCall};");
                    sb.AppendLine($"{indent}            }}");
                    sb.AppendLine($"{indent}            else");
                    sb.AppendLine($"{indent}            {{");
                    var outCall = inlineOutCall ?? $"{deserializerVar}.Deserialize(out {valName}.{name}, ref reader)";
                    sb.AppendLine($"{indent}                {outCall};");
                    sb.AppendLine($"{indent}            }}");
                }

                break;
        }
    }

    // Helper: Generate ref deserialization with temp variable (for properties/private fields)
    private void GenerateRefDeserializeWithTemp(StringBuilder sb, NinoMember member,
        string tempName, Func<ITypeSymbol, string> getDeserializerVar,
        Dictionary<NinoMember, string> customFormatterVars, string indent = "")
    {
        var declaredType = member.Type;

        if (member.HasCustomFormatter())
        {
            if (customFormatterVars.TryGetValue(member, out var formatterVar))
            {
                if (declaredType.IsValueType)
                {
                    sb.AppendLine($"{indent}            {formatterVar}.DeserializeRef(ref {tempName}, ref reader);");
                }
                else
                {
                    sb.AppendLine($"{indent}            if ({tempName} != null)");
                    sb.AppendLine($"{indent}            {{");
                    sb.AppendLine($"{indent}                {formatterVar}.DeserializeRef(ref {tempName}, ref reader);");
                    sb.AppendLine($"{indent}            }}");
                    sb.AppendLine($"{indent}            else");
                    sb.AppendLine($"{indent}            {{");
                    sb.AppendLine($"{indent}                {formatterVar}.Deserialize(out {tempName}, ref reader);");
                    sb.AppendLine($"{indent}            }}");
                }

                return;
            }
        }

        var kind = declaredType.GetKind(NinoGraph, GeneratedBuiltInTypes);

        switch (kind)
        {
            case NinoTypeHelper.NinoTypeKind.Unmanaged:
                sb.AppendLine($"{indent}            reader.UnsafeRead(out {tempName});");
                break;

            case NinoTypeHelper.NinoTypeKind.Boxed:
                sb.AppendLine($"{indent}            {tempName} = NinoDeserializer.DeserializeBoxed(ref reader, null);");
                break;

            case NinoTypeHelper.NinoTypeKind.BuiltIn:
                if (declaredType.SpecialType == SpecialType.System_String)
                {
                    if (member.IsUtf8String)
                        sb.AppendLine($"{indent}            reader.ReadUtf8(out {tempName});");
                    else
                        sb.AppendLine($"{indent}            reader.Read(out {tempName});");
                }
                else
                {
                    sb.AppendLine($"{indent}            Deserializer.Deserialize(out {tempName}, ref reader);");
                }

                break;

            case NinoTypeHelper.NinoTypeKind.NinoType:
                var deserializerVar = getDeserializerVar(declaredType);
                if (declaredType.IsValueType)
                {
                    if (TryGetInlineDeserializeCall(declaredType, true, tempName, out var inlineRefCall))
                    {
                        sb.AppendLine($"{indent}            {inlineRefCall};");
                    }
                    else
                    {
                        sb.AppendLine($"{indent}            {deserializerVar}.DeserializeRef(ref {tempName}, ref reader);");
                    }
                }
                else
                {
                    var inlineRefCall = TryGetInlineDeserializeCall(declaredType, true, tempName, out var inlineRef)
                        ? inlineRef
                        : null;
                    var inlineOutCall = TryGetInlineDeserializeCall(declaredType, false, tempName, out var inlineOut)
                        ? inlineOut
                        : null;
                    sb.AppendLine($"{indent}            if ({tempName} != null)");
                    sb.AppendLine($"{indent}            {{");
                    var refCall = inlineRefCall ?? $"{deserializerVar}.DeserializeRef(ref {tempName}, ref reader)";
                    sb.AppendLine($"{indent}                {refCall};");
                    sb.AppendLine($"{indent}            }}");
                    sb.AppendLine($"{indent}            else");
                    sb.AppendLine($"{indent}            {{");
                    var outCall = inlineOutCall ?? $"{deserializerVar}.Deserialize(out {tempName}, ref reader)";
                    sb.AppendLine($"{indent}                {outCall};");
                    sb.AppendLine($"{indent}            }}");
                }

                break;
        }
    }

    // Helper: Generate private field access deserialization (NET8.0+)
    private void GeneratePrivateFieldDeserialize(StringBuilder sb, NinoMember member,
        string valName, string name, NinoType nt,
        Func<ITypeSymbol, string> getDeserializerVar,
        Dictionary<NinoMember, string> customFormatterVars, string indent = "")
    {
        var declaredType = member.Type;
        var accessName = nt.TypeSymbol.IsValueType ? $"ref {valName}" : valName;

        if (member.HasCustomFormatter())
        {
            if (customFormatterVars.TryGetValue(member, out var formatterVar))
            {
                if (declaredType.IsValueType)
                {
                    sb.AppendLine(
                        $"{indent}            {formatterVar}.DeserializeRef(ref PrivateAccessor.__{name}__({accessName}), ref reader);");
                }
                else
                {
                    sb.AppendLine($"{indent}            ref var field_{name} = ref PrivateAccessor.__{name}__({accessName});");
                    sb.AppendLine($"{indent}            if (field_{name} != null)");
                    sb.AppendLine($"{indent}            {{");
                    sb.AppendLine($"{indent}                {formatterVar}.DeserializeRef(ref field_{name}, ref reader);");
                    sb.AppendLine($"{indent}            }}");
                    sb.AppendLine($"{indent}            else");
                    sb.AppendLine($"{indent}            {{");
                    sb.AppendLine($"{indent}                {formatterVar}.Deserialize(out field_{name}, ref reader);");
                    sb.AppendLine($"{indent}            }}");
                }

                return;
            }
        }

        var kind = declaredType.GetKind(NinoGraph, GeneratedBuiltInTypes);

        switch (kind)
        {
            case NinoTypeHelper.NinoTypeKind.Unmanaged:
                sb.AppendLine($"{indent}            reader.UnsafeRead(out PrivateAccessor.__{name}__({accessName}));");
                break;

            case NinoTypeHelper.NinoTypeKind.Boxed:
                sb.AppendLine($"{indent}            ref var field_{name} = ref PrivateAccessor.__{name}__({accessName});");
                sb.AppendLine($"{indent}            NinoDeserializer.DeserializeRefBoxed(ref field_{name}, ref reader, null);");
                break;

            case NinoTypeHelper.NinoTypeKind.BuiltIn:
                if (declaredType.SpecialType == SpecialType.System_String)
                {
                    if (member.IsUtf8String)
                        sb.AppendLine($"{indent}            reader.ReadUtf8(out PrivateAccessor.__{name}__({accessName}));");
                    else
                        sb.AppendLine($"{indent}            reader.Read(out PrivateAccessor.__{name}__({accessName}));");
                }
                else
                {
                    sb.AppendLine($"{indent}            ref var field_{name} = ref PrivateAccessor.__{name}__({accessName});");
                    sb.AppendLine($"{indent}            Deserializer.DeserializeRef(ref field_{name}, ref reader);");
                }

                break;

            case NinoTypeHelper.NinoTypeKind.NinoType:
                var deserializerVar = getDeserializerVar(declaredType);
                if (declaredType.IsValueType)
                {
                    var accessorExpr = $"PrivateAccessor.__{name}__({accessName})";
                    if (TryGetInlineDeserializeCall(declaredType, true, accessorExpr, out var inlineRefCall))
                    {
                        sb.AppendLine($"{indent}            {inlineRefCall};");
                    }
                    else
                    {
                        sb.AppendLine($"{indent}            {deserializerVar}.DeserializeRef(ref {accessorExpr}, ref reader);");
                    }
                }
                else
                {
                    sb.AppendLine($"{indent}            ref var field_{name} = ref PrivateAccessor.__{name}__({accessName});");
                    var inlineRefCall =
                        TryGetInlineDeserializeCall(declaredType, true, $"field_{name}", out var inlineRef)
                            ? inlineRef
                            : null;
                    var inlineOutCall =
                        TryGetInlineDeserializeCall(declaredType, false, $"field_{name}", out var inlineOut)
                            ? inlineOut
                            : null;
                    sb.AppendLine($"{indent}            if (field_{name} != null)");
                    sb.AppendLine($"{indent}            {{");
                    var refCall = inlineRefCall ?? $"{deserializerVar}.DeserializeRef(ref field_{name}, ref reader)";
                    sb.AppendLine($"{indent}                {refCall};");
                    sb.AppendLine($"{indent}            }}");
                    sb.AppendLine($"{indent}            else");
                    sb.AppendLine($"{indent}            {{");
                    var outCall = inlineOutCall ?? $"{deserializerVar}.Deserialize(out field_{name}, ref reader)";
                    sb.AppendLine($"{indent}                {outCall};");
                    sb.AppendLine($"{indent}            }}");
                }

                break;
        }
    }

    // Helper: Generate private field/property deserialization fallback (< NET8.0)
    private void GeneratePrivateFieldDeserializeFallback(StringBuilder sb, NinoMember member,
        string valName, string name, string tempName,
        Func<ITypeSymbol, string> getDeserializerVar,
        Dictionary<NinoMember, string> customFormatterVars, string indent = "")
    {
        var declaredType = member.Type;

        if (member.HasCustomFormatter())
        {
            if (customFormatterVars.TryGetValue(member, out var formatterVar))
            {
                sb.AppendLine(
                    $"{indent}            {declaredType.GetDisplayString()} {tempName} = {valName}.__nino__generated__{name};");
                if (declaredType.IsValueType)
                {
                    sb.AppendLine($"{indent}            {formatterVar}.DeserializeRef(ref {tempName}, ref reader);");
                }
                else
                {
                    sb.AppendLine($"{indent}            if ({tempName} != null)");
                    sb.AppendLine($"{indent}            {{");
                    sb.AppendLine($"{indent}                {formatterVar}.DeserializeRef(ref {tempName}, ref reader);");
                    sb.AppendLine($"{indent}            }}");
                    sb.AppendLine($"{indent}            else");
                    sb.AppendLine($"{indent}            {{");
                    sb.AppendLine($"{indent}                {formatterVar}.Deserialize(out {tempName}, ref reader);");
                    sb.AppendLine($"{indent}            }}");
                }

                sb.AppendLine($"{indent}            {valName}.__nino__generated__{name} = {tempName};");
                return;
            }
        }

        var kind = declaredType.GetKind(NinoGraph, GeneratedBuiltInTypes);

        switch (kind)
        {
            case NinoTypeHelper.NinoTypeKind.Unmanaged:
                sb.AppendLine($"{indent}            {declaredType.GetDisplayString()} {tempName};");
                sb.AppendLine($"{indent}            reader.UnsafeRead(out {tempName});");
                sb.AppendLine($"{indent}            {valName}.__nino__generated__{name} = {tempName};");
                break;

            case NinoTypeHelper.NinoTypeKind.Boxed:
                sb.AppendLine($"{indent}            {declaredType.GetDisplayString()} {tempName};");
                sb.AppendLine($"{indent}            {tempName} = NinoDeserializer.DeserializeBoxed(ref reader, null);");
                sb.AppendLine($"{indent}            {valName}.__nino__generated__{name} = {tempName};");
                break;

            case NinoTypeHelper.NinoTypeKind.BuiltIn:
                if (declaredType.SpecialType == SpecialType.System_String)
                {
                    sb.AppendLine($"{indent}            {declaredType.GetDisplayString()} {tempName};");
                    if (member.IsUtf8String)
                        sb.AppendLine($"{indent}            reader.ReadUtf8(out {tempName});");
                    else
                        sb.AppendLine($"{indent}            reader.Read(out {tempName});");
                    sb.AppendLine($"{indent}            {valName}.__nino__generated__{name} = {tempName};");
                }
                else
                {
                    sb.AppendLine(
                        $"{indent}            {declaredType.GetDisplayString()} {tempName} = {valName}.__nino__generated__{name};");
                    sb.AppendLine($"{indent}            Deserializer.DeserializeRef(ref {tempName}, ref reader);");
                    sb.AppendLine($"{indent}            {valName}.__nino__generated__{name} = {tempName};");
                }

                break;

            case NinoTypeHelper.NinoTypeKind.NinoType:
                sb.AppendLine(
                    $"{indent}            {declaredType.GetDisplayString()} {tempName} = {valName}.__nino__generated__{name};");
                var deserializerVar = getDeserializerVar(declaredType);
                if (declaredType.IsValueType)
                {
                    if (TryGetInlineDeserializeCall(declaredType, true, tempName, out var inlineRefCall))
                    {
                        sb.AppendLine($"{indent}            {inlineRefCall};");
                    }
                    else
                    {
                        sb.AppendLine($"{indent}            {deserializerVar}.DeserializeRef(ref {tempName}, ref reader);");
                    }
                }
                else
                {
                    var inlineRefCall = TryGetInlineDeserializeCall(declaredType, true, tempName, out var inlineRef)
                        ? inlineRef
                        : null;
                    var inlineOutCall = TryGetInlineDeserializeCall(declaredType, false, tempName, out var inlineOut)
                        ? inlineOut
                        : null;
                    sb.AppendLine($"{indent}            if ({tempName} != null)");
                    sb.AppendLine($"{indent}            {{");
                    var refCall = inlineRefCall ?? $"{deserializerVar}.DeserializeRef(ref {tempName}, ref reader)";
                    sb.AppendLine($"{indent}                {refCall};");
                    sb.AppendLine($"{indent}            }}");
                    sb.AppendLine($"{indent}            else");
                    sb.AppendLine($"{indent}            {{");
                    var outCall = inlineOutCall ?? $"{deserializerVar}.Deserialize(out {tempName}, ref reader)";
                    sb.AppendLine($"{indent}                {outCall};");
                    sb.AppendLine($"{indent}            }}");
                }

                sb.AppendLine($"{indent}            {valName}.__nino__generated__{name} = {tempName};");
                break;
        }
    }

    private (List<(string, string)> vars,
        List<(string, string, bool)> privateVars,
        Dictionary<string, string> args,
        Dictionary<string, string> tupleMap) WriteMembers(
            string valName, StringBuilder sb, NinoType nt, string[] constructorMember, bool byRef, SourceProductionContext spc, string indent = "")
    {
        List<(string, string)> vars = new List<(string, string)>();
        List<(string, string, bool)> privateVars = new List<(string, string, bool)>();
        Dictionary<string, string> args = new Dictionary<string, string>();
        Dictionary<string, string> tupleMap = new Dictionary<string, string>();

        List<string> valNames = new();

        // First pass: collect all types that need deserializers or custom formatters
        HashSet<ITypeSymbol> typesNeedingDeserializers = new(SymbolEqualityComparer.Default);
        HashSet<NinoMember> membersWithCustomFormatters = new();
        List<List<NinoMember>> groups = nt.GroupByPrimitivity().ToList();

        foreach (var memberGroup in groups)
        {
            foreach (var member in memberGroup)
            {
                if (member.IsCtorParameter) continue;

                if (member.HasCustomFormatter())
                {
                    membersWithCustomFormatters.Add(member);
                }
                else
                {
                    var kind = member.Type.GetKind(NinoGraph, GeneratedBuiltInTypes);
                    if (kind == NinoTypeHelper.NinoTypeKind.NinoType)
                    {
                        typesNeedingDeserializers.Add(member.Type);
                    }
                    // Unmanaged, Boxed, and BuiltIn types don't need cached deserializers
                }
            }
        }

        // No need to generate deserializer variable declarations since CachedDeserializer is static
        Dictionary<string, string> deserializerVarsByType = new();
        foreach (var type in typesNeedingDeserializers)
        {
            var typeDisplayName = type.GetDisplayString();
            // Store the type name for direct static access
            deserializerVarsByType[typeDisplayName] = $"CachedDeserializer<{typeDisplayName}>";
        }

        // Use static formatter fields instead of local variables
        Dictionary<NinoMember, string> customFormatterVarsByMember = new();
        foreach (var member in membersWithCustomFormatters)
        {
            var formatterType = member.CustomFormatterType();
            if (formatterType != null)
            {
                var varName = formatterType.GetCachedVariableName("formatter");
                customFormatterVarsByMember[member] = varName;
                // Note: Static field should be generated at class level, not as local variable
            }
        }

        // Helper to get deserializer variable name for a type
        string GetDeserializerVarName(ITypeSymbol type)
        {
            var typeDisplayName = type.GetDisplayString();
            if (!deserializerVarsByType.TryGetValue(typeDisplayName, out var varName))
            {
                // Generate the static class access if it wasn't collected earlier (fallback for Priority 4)
                varName = $"CachedDeserializer<{typeDisplayName}>";
                deserializerVarsByType[typeDisplayName] = varName;
            }

            return varName;
        }

        for (var index1 = 0; index1 < groups.Count; index1++)
        {
            var members = groups[index1];
            valNames.Clear();
            foreach (var member in members)
            {
                var name = member.Name;
                var declaredType = member.Type;
                var isCtorParam = member.IsCtorParameter;
                var isPrivate = member.IsPrivate;
                var isProperty = member.IsProperty;

                var t = declaredType.GetDisplayString().Select(c => char.IsLetterOrDigit(c) ? c : '_')
                    .Aggregate("", (a, b) => a + b);
                var tempName = $"{t}_temp_{name}";

                if (constructorMember.Any(c => c.ToLower().Equals(name.ToLower())))
                {
                    args.Add(name, tempName);
                }
                else
                {
                    // we dont want init-only properties from the primary constructor
                    if (!isCtorParam)
                    {
                        if (!isPrivate)
                        {
                            vars.Add((name, tempName));
                        }
                        else
                        {
                            privateVars.Add((name, tempName, isProperty));
                        }
                    }
                }

                valNames.Add(tempName);
            }

            if (members.Count == 1)
            {
                var member = members[0];
                var declaredType = member.Type;

                var tempName = valNames[0];
                //check if the typesymbol declaredType is string
                if (declaredType.SpecialType == SpecialType.System_String)
                {
                    // PRIORITY 3: String types (UTF8 and UTF16 optimizations)
                    var str = member.IsUtf8String
                        ? $"reader.ReadUtf8(out {tempName});"
                        : $"reader.Read(out {tempName});";

                    //weak version tolerance
                    var toleranceCode = $$$"""
                                           {{{indent}}}            {{{declaredType.GetDisplayString()}}} {{{tempName}}} = default;
                                           {{{indent}}}            #if {{{NinoTypeHelper.WeakVersionToleranceSymbol}}}
                                           {{{indent}}}            if (!reader.Eof)
                                           {{{indent}}}            {
                                           {{{indent}}}               {{{str}}}
                                           {{{indent}}}            }
                                           {{{indent}}}            #else
                                           {{{indent}}}            {{{str}}}
                                           {{{indent}}}            #endif
                                           """;

                    sb.AppendLine(toleranceCode);
                    sb.AppendLine();
                }
                else
                {
                    var currentMember = members[0];
                    if (byRef && !currentMember.IsCtorParameter)
                    {
                        vars.Remove((members[0].Name, valNames[0]));
                        privateVars.Remove((members[0].Name, valNames[0], members[0].IsProperty));

                        var isPrivate = currentMember.IsPrivate;
                        var isProperty = currentMember.IsProperty;
                        var name = currentMember.Name;

                        if (!isPrivate && !isProperty)
                        {
                            GenerateRefDeserializePublicField(sb, currentMember, valName, GetDeserializerVarName,
                                customFormatterVarsByMember, indent);
                        }
                        else if (isProperty)
                        {
                            // Properties - store in temp, call ref overload, assign back
                            if (isPrivate)
                            {
                                var accessName = nt.TypeSymbol.IsValueType ? $"ref {valName}" : valName;
                                sb.AppendLine($"{indent}            {declaredType.GetDisplayString()} {tempName};");
                                sb.AppendLine($"{indent}#if NET8_0_OR_GREATER");
                                sb.AppendLine(
                                    $"{indent}            {tempName} = PrivateAccessor.__get__{name}__({accessName});");
                                sb.AppendLine($"{indent}#else");
                                sb.AppendLine($"{indent}            {tempName} = {valName}.__nino__generated__{name};");
                                sb.AppendLine($"{indent}#endif");
                            }
                            else
                            {
                                sb.AppendLine(
                                    $"{indent}            {declaredType.GetDisplayString()} {tempName} = {valName}.{name};");
                            }

                            GenerateRefDeserializeWithTemp(sb, currentMember, tempName, GetDeserializerVarName,
                                customFormatterVarsByMember, indent);

                            // Assign back
                            if (isPrivate)
                            {
                                var accessName = nt.TypeSymbol.IsValueType ? $"ref {valName}" : valName;
                                sb.AppendLine($"{indent}#if NET8_0_OR_GREATER");
                                sb.AppendLine(
                                    $"{indent}            PrivateAccessor.__set__{name}__({accessName}, {tempName});");
                                sb.AppendLine($"{indent}#else");
                                sb.AppendLine($"{indent}            {valName}.__nino__generated__{name} = {tempName};");
                                sb.AppendLine($"{indent}#endif");
                            }
                            else
                            {
                                sb.AppendLine($"{indent}            {valName}.{name} = {tempName};");
                            }
                        }
                        else
                        {
                            // Private field
                            sb.AppendLine($"{indent}#if NET8_0_OR_GREATER");
                            GeneratePrivateFieldDeserialize(sb, currentMember, valName, name, nt,
                                GetDeserializerVarName, customFormatterVarsByMember, indent);
                            sb.AppendLine($"{indent}#else");
                            GeneratePrivateFieldDeserializeFallback(sb, currentMember, valName, name, tempName,
                                GetDeserializerVarName, customFormatterVarsByMember, indent);
                            sb.AppendLine($"{indent}#endif");
                        }
                    }
                    else
                    {
                        var readStatement = GenerateReadStatement(currentMember, tempName, GetDeserializerVarName,
                            customFormatterVarsByMember, nt, spc);
                        var toleranceCode = $$$"""
                                               {{{indent}}}            {{{declaredType.GetDisplayString()}}} {{{tempName}}} = default;
                                               {{{indent}}}            #if {{{NinoTypeHelper.WeakVersionToleranceSymbol}}}
                                               {{{indent}}}            if (!reader.Eof)
                                               {{{indent}}}            {
                                               {{{indent}}}               {{{readStatement}}}
                                               {{{indent}}}            }
                                               {{{indent}}}            #else
                                               {{{indent}}}            {{{readStatement}}}
                                               {{{indent}}}            #endif
                                               """;
                        sb.AppendLine(toleranceCode);
                    }
                }
            }
            else
            {
                // Standard path with version tolerance
                sb.AppendLine($"{indent}#if {NinoTypeHelper.WeakVersionToleranceSymbol}");
                for (var index = 0; index < valNames.Count; index++)
                {
                    var val = valNames[index];
                    sb.AppendLine($"{indent}            {members[index].Type.GetDisplayString()} {val} = default;");
                    sb.AppendLine($"{indent}            if (!reader.Eof) reader.Read(out {val});");
                }

                sb.AppendLine($"{indent}#else");
                sb.AppendLine(
                    $"{indent}            reader.Read(out NinoTuple<{string.Join(", ",
                        Enumerable.Range(0, valNames.Count)
                            .Select(i => $"{members[i].Type.GetDisplayString()}"))}> t{index1});");
                for (int i = 0; i < members.Count; i++)
                {
                    var name = members[i].Name;
                    tupleMap[name] = $"t{index1}.Item{i + 1}";
                }

                sb.AppendLine($"{indent}#endif");
            }
        }

        return (vars, privateVars, args, tupleMap);
    }

    private void WriteMembersWithCustomConstructor(SourceProductionContext spc,
        StringBuilder sb, NinoType nt,
        string valName,
        string[] constructorMember,
        IMethodSymbol? constructor,
        string indent = "")
    {
        var (vars, privateVars, args, tupleMap) =
            WriteMembers(valName, sb, nt, constructorMember, constructor == null, spc, indent);

        if (constructor != null)
        {
            List<string> ctorArgs = new List<string>();

            string? missingArg = null;
            foreach (var m in constructorMember)
            {
                var k = args.Keys.FirstOrDefault(k =>
                    k.ToLower().Equals(m.ToLower()));
                if (k != null)
                {
                    ctorArgs.Add(k);
                }
                else
                {
                    sb.AppendLine($"            // missing constructor member {m}");
                    missingArg = m;
                    spc.ReportDiagnostic(Diagnostic.Create(
                        new DiagnosticDescriptor("NINO001", "Nino Generator",
                            "Missing constructor member {0} for {1}",
                            "Nino.Generator",
                            DiagnosticSeverity.Error, true), constructor.Locations[0],
                        m, nt.TypeSymbol.GetDisplayString()));
                    break;
                }
            }

            if (missingArg != null)
            {
                sb.AppendLine(
                    $"            throw new InvalidOperationException(\"Missing constructor member {missingArg}\");");
                return;
            }

            var ctorStmt = constructor.MethodKind == MethodKind.Constructor
                ? $"new {nt.TypeSymbol.GetDisplayString()}"
                : $"{nt.TypeSymbol.GetDisplayString()}.{constructor.Name}";
            if (args.Keys.Any(tupleMap.ContainsKey))
            {
                sb.AppendLine($"#if {NinoTypeHelper.WeakVersionToleranceSymbol}");
                sb.AppendLine(
                    $"            {valName} = {ctorStmt}({string.Join(", ", ctorArgs.Select(k => args[k]))}){(vars.Count > 0 ? "" : ";")}");
                sb.AppendLine("#else");
                sb.AppendLine(
                    $"            {valName} = {ctorStmt}({string.Join(", ", ctorArgs.Select(k =>
                    {
                        if (!tupleMap.TryGetValue(k, out var value))
                        {
                            return args[k];
                        }

                        return value;
                    }))}){(vars.Count > 0 ? "" : ";")}");
                sb.AppendLine("#endif");
            }
            else
            {
                sb.AppendLine(
                    $"            {valName} = {ctorStmt}({string.Join(", ", ctorArgs.Select(k => args[k]))}){(vars.Count > 0 ? "" : ";")}");
            }
        }

        char eol = constructor == null ? ';' : ',';
        if (vars.Count > 0)
        {
            string padding = new string(' ', valName.Length);
            sb.AppendLine($"            {padding}   {{");
            foreach (var (memberName, varName) in vars)
            {
                if (tupleMap.TryGetValue(memberName, out var value))
                {
                    var name = constructor == null ? $"{valName}.{memberName}" : memberName;
                    sb.AppendLine($"#if {NinoTypeHelper.WeakVersionToleranceSymbol}");
                    sb.AppendLine(
                        $"            {padding}      \t{name} = {varName}{eol}");
                    sb.AppendLine("#else");
                    sb.AppendLine(
                        $"            {padding}      \t{name} = {value}{eol}");
                    sb.AppendLine("#endif");
                }
                else
                {
                    var name = constructor == null ? $"{valName}.{memberName}" : memberName;
                    sb.AppendLine(
                        $"            {padding}      \t{name} = {varName}{eol}");
                }
            }

            sb.AppendLine($"            {padding}   }};");
        }

        if (privateVars.Count > 0)
        {
            var originalValName = valName;

            if (nt.TypeSymbol.IsValueType)
            {
                valName = $"ref {valName}";
            }

            static void AppendAccess(StringBuilder sb, bool isProperty, string memberName, string valName,
                string varName)
            {
                if (isProperty)
                {
                    sb.AppendLine(
                        $"            PrivateAccessor.__set__{memberName}__({valName}, {varName});");
                }
                else
                {
                    sb.AppendLine(
                        $"            ref var __{varName} = ref PrivateAccessor.__{memberName}__({valName});");
                    sb.AppendLine($"            __{varName} = {varName};");
                }
            }

            sb.AppendLine("#if NET8_0_OR_GREATER");
            foreach (var (memberName, varName, isProperty) in privateVars)
            {
                if (tupleMap.TryGetValue(memberName, out var value))
                {
                    sb.AppendLine($"#if {NinoTypeHelper.WeakVersionToleranceSymbol}");
                    AppendAccess(sb, isProperty, memberName, valName, varName);
                    sb.AppendLine("#else");
                    AppendAccess(sb, isProperty, memberName, valName, value);
                    sb.AppendLine("#endif");
                }
                else
                {
                    AppendAccess(sb, isProperty, memberName, valName, varName);
                }
            }

            sb.AppendLine("#else");
            foreach (var (memberName, varName, _) in privateVars)
            {
                var legacyVal = $"{originalValName}.__nino__generated__{memberName}";
                if (tupleMap.TryGetValue(memberName, out var value))
                {
                    sb.AppendLine($"#if {NinoTypeHelper.WeakVersionToleranceSymbol}");
                    sb.AppendLine($"            {legacyVal} = {varName};");
                    sb.AppendLine("#else");
                    sb.AppendLine($"            {legacyVal} = {value};");
                    sb.AppendLine("#endif");
                }
                else
                {
                    sb.AppendLine($"            {legacyVal} = {varName};");
                }
            }

            sb.AppendLine("#endif");
        }
    }

    private void CreateInstance(SourceProductionContext spc, StringBuilder sb,
        NinoType nt, string valName, bool byRef, string indent = "")
    {
        if (byRef)
        {
            WriteMembersWithCustomConstructor(spc, sb, nt, valName, [], null, indent);
            return;
        }

        //if this subtype contains a custom constructor, use it
        //go through all constructors and find the one with the NinoConstructor attribute
        //get constructors of the symbol
        var constructors = (nt.TypeSymbol as INamedTypeSymbol)?.Constructors.ToList();

        // append static methods that return an instance of the type
        constructors ??= [];
        constructors.AddRange(nt.TypeSymbol.GetMembers().OfType<IMethodSymbol>()
            .Where(m => m.DeclaredAccessibility == Accessibility.Public &&
                        m.IsStatic &&
                        SymbolEqualityComparer.Default.Equals(m.ReturnType, nt.TypeSymbol)));

        if (constructors.Count == 0)
        {
            sb.AppendLine(
                $"            // no constructor found, symbol is not a named type symbol but a {nt.TypeSymbol.GetType()}");
            sb.AppendLine(
                $"            throw new InvalidOperationException(\"No constructor found for {nt.TypeSymbol.GetDisplayString()}\");");
            return;
        }

        IMethodSymbol? constructor = null;

        // if typesymbol is a record, try get the primary constructor
        if (nt.TypeSymbol.IsRecord)
        {
            constructor = constructors.FirstOrDefault(c => c.Parameters.Length == 0 || c.Parameters.All(p =>
                nt.Members.Any(m => m.Name == p.Name)));
        }

        if (constructor == null)
            constructor = constructors.OrderBy(c => c.Parameters.Length).FirstOrDefault();

        var custom = constructors.FirstOrDefault(c => c.GetAttributesCache().Any(a =>
            a.AttributeClass != null &&
            a.AttributeClass.GetDisplayString().EndsWith("NinoConstructorAttribute")));
        if (custom != null)
        {
            constructor = custom;
        }

        if (constructor == null)
        {
            sb.AppendLine("            // no constructor found");
            sb.AppendLine(
                $"            throw new InvalidOperationException(\"No constructor found for {nt.TypeSymbol.GetDisplayString()}\");");
            return;
        }

        sb.AppendLine($"            // use {constructor.ToDisplayString()}");

        var attr = constructor.GetNinoConstructorAttribute();
        string[] args;
        if (attr != null)
        {
            //attr is         [NinoConstructor(nameof(a), nameof(b), nameof(c), ...)]
            //we need to get a, b, c, ...
            var args0 = attr.ConstructorArguments[0].Values;
            //should be a string array
            args = args0.Select(a =>
                a.Value as string).ToArray()!;
        }
        else
        {
            args = constructor.Parameters.Select(p => p.Name).ToArray();
        }

        WriteMembersWithCustomConstructor(spc, sb, nt, valName, args, constructor, indent);
    }


    private static string GeneratePrivateDeserializeImplMethodBody(string typeName, string indent = "",
        string typeParam = "",
        string genericConstraint = "")
    {
        var ret = $$"""
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static void Deserialize{{typeParam}}(out {{typeName}} value, ref Reader reader) {{genericConstraint}}
                    {
                    #if {{NinoTypeHelper.WeakVersionToleranceSymbol}}
                         if (reader.Eof)
                         {
                            value = default;
                            return;
                         }
                    #endif
                        
                        reader.Read(out value);
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static void DeserializeRef{{typeParam}}(ref {{typeName}} value, ref Reader reader) {{genericConstraint}}
                    {
                    #if {{NinoTypeHelper.WeakVersionToleranceSymbol}}
                         if (reader.Eof)
                         {
                            value = default;
                            return;
                         }
                    #endif
                        
                        reader.Read(out value);
                    }
                    """;

        // indent
        ret = ret.Replace("\n", $"\n{indent}");
        return $"{indent}{ret}";
    }

    private bool TryGetInlineDeserializeCall(ITypeSymbol type, bool byRef, string valueExpression,
        out string invocation)
    {
        invocation = null!;
        if (!NinoGraph.TypeMap.TryGetValue(type.GetDisplayString(), out var ninoType))
            return false;

        if (!string.IsNullOrEmpty(ninoType.CustomDeserializer))
            return false;

        if (!ninoType.TypeSymbol.IsSealedOrStruct())
        {
            // For polymorphic types, always use the generated polymorphic methods
            invocation = byRef
                ? $"Deserializer.DeserializeRefPolymorphic(ref {valueExpression}, ref reader)"
                : $"Deserializer.DeserializePolymorphic(out {valueExpression}, ref reader)";
            return true;
        }

        invocation = byRef
            ? $"Deserializer.DeserializeImplRef(ref {valueExpression}, ref reader)"
            : $"Deserializer.DeserializeImpl(out {valueExpression}, ref reader)";
        return true;
    }

    private Dictionary<string, (ITypeSymbol FormatterType, ITypeSymbol ValueType)> CollectGlobalCustomFormatters()
    {
        var globalCustomFormatters = new Dictionary<string, (ITypeSymbol FormatterType, ITypeSymbol ValueType)>();

        foreach (var ninoType in NinoTypes)
        {
            foreach (var member in ninoType.Members)
            {
                if (member.HasCustomFormatter())
                {
                    var formatterType = member.CustomFormatterType();
                    if (formatterType != null)
                    {
                        var key = $"{formatterType.GetDisplayString()}_{member.Type.GetDisplayString()}";
                        globalCustomFormatters[key] = (formatterType, member.Type);
                    }
                }
            }
        }

        return globalCustomFormatters;
    }

    private string GenerateStaticFormatterFields(
        Dictionary<string, (ITypeSymbol FormatterType, ITypeSymbol ValueType)> globalCustomFormatters)
    {
        if (globalCustomFormatters.Count == 0)
            return "";

        var sb = new StringBuilder();
        sb.AppendLine();
        sb.AppendLine("        // Static formatter fields for optimal performance");

        foreach (var kvp in globalCustomFormatters)
        {
            var formatterType = kvp.Value.FormatterType;
            var valueType = kvp.Value.ValueType;
            var varName = formatterType.GetCachedVariableName("formatter");
            sb.AppendLine(
                $"        private static readonly {formatterType.GetDisplayString()} {varName} = NinoFormatterInstance<{formatterType.GetDisplayString()}, {valueType.GetDisplayString()}>.Instance;");
        }

        return sb.ToString();
    }
}