using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Nino.Generator.Collection;
using Nino.Generator.Metadata;
using Nino.Generator.Template;

namespace Nino.Generator.Common;

public partial class DeserializerGenerator(
    Compilation compilation,
    NinoGraph ninoGraph,
    List<NinoType> ninoTypes,
    List<ITypeSymbol> potentialTypes)
    : NinoCommonGenerator(compilation, ninoGraph, ninoTypes)
{
    private void GenerateGenericRegister(StringBuilder sb, string name, HashSet<ITypeSymbol> generatedTypes)
    {
        sb.AppendLine($$"""
                                private static void Register{{name}}Deserializers()
                                {
                        """);
        foreach (var type in generatedTypes)
        {
            // no ref struct types
            if (type.IsRefStruct())
                continue;
            var typeFullName = type.GetDisplayString();
            sb.AppendLine($$"""
                                        NinoDeserializer.Register<{{typeFullName}}>(Deserialize);
                                        _deserializers[typeof({{typeFullName}}).TypeHandle.Value] = new CachedDeserializer<{{typeFullName}}>(Deserialize);
                            """);
        }

        sb.AppendLine("        }");
    }

    protected override void Generate(SourceProductionContext spc)
    {
        var compilation = Compilation;

        StringBuilder sb = new(32_000_000);
        HashSet<ITypeSymbol> collectionTypes = new(SymbolEqualityComparer.Default);
        new CollectionDeserializerGenerator(compilation, potentialTypes, NinoGraph).Generate(spc, collectionTypes);
        GenerateGenericRegister(sb, "Collection", collectionTypes);

        HashSet<ITypeSymbol> trivialTypes = new(SymbolEqualityComparer.Default);
        // add string type
        trivialTypes.Add(compilation.GetSpecialType(SpecialType.System_String));
        GenerateTrivialCode(spc, collectionTypes, trivialTypes);
        GenerateGenericRegister(sb, "Trivial", trivialTypes);

        var curNamespace = compilation.AssemblyName!.GetNamespace();
        // generate code
        var genericCode = $$"""
                            // <auto-generated/>
                            using System;
                            using global::Nino.Core;
                            using System.Buffers;
                            using System.ComponentModel;
                            using System.Collections.Generic;
                            using System.Collections.Concurrent;
                            using System.Runtime.InteropServices;
                            using System.Runtime.CompilerServices;

                            namespace {{curNamespace}}
                            {
                                public static partial class Deserializer
                                {
                                    private delegate void DeserializeDelegate<T>(out T result, ref Reader reader);
                                    private static Dictionary<IntPtr, ICachedDeserializer> _deserializers = new();
                                    
                                    private interface ICachedDeserializer
                                    {
                                        [MethodImpl(MethodImplOptions.AggressiveInlining)]   
                                        object DeserializeBoxed(ref Reader reader);
                                    }
                                    
                                    private class CachedDeserializer<T> : ICachedDeserializer
                                    {
                                        public static DeserializeDelegate<T> Deserializer;
                                        
                                        public CachedDeserializer(DeserializeDelegate<T> deserializer)
                                        {
                                            Deserializer = deserializer;
                                        }
                                        
                                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                        public object DeserializeBoxed(ref Reader reader)
                                        {
                                            if (Deserializer == null)
                                                throw new Exception($"Deserializer not found for type {typeof(T).FullName}");
                                                
                                            if (reader.Eof)
                                                return default;
                                            
                                            Deserializer.Invoke(out T value, ref reader);
                                            return value;
                                        }
                                    }
                                    
                                    static Deserializer()
                                    {
                                        Init();
                                    }
                                    
                                    public static void Init()
                                    {
                                        RegisterTrivialDeserializers();
                                        RegisterCollectionDeserializers();
                                    }

                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    public static void Deserialize<T>(ReadOnlySpan<byte> data, out T value)
                                    {
                                        var reader = new Reader(data);
                                        value = DeserializeGeneric<T>(ref reader);
                                    }
                                    
                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    public static T Deserialize<T>(ReadOnlySpan<byte> data)
                                    {
                                        var reader = new Reader(data);
                                        return DeserializeGeneric<T>(ref reader);
                                    }
                                    
                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    private static T DeserializeGeneric<T>(ref Reader reader)
                                    {
                                    #if {{NinoTypeHelper.WeakVersionToleranceSymbol}}
                                         if (reader.Eof)
                                         {
                                            return default;
                                         }
                                    #endif
                                        
                                        var deserializer = CachedDeserializer<T>.Deserializer;
                                        if (deserializer != null)
                                        {
                                            deserializer.Invoke(out T value, ref reader);
                                            return value;
                                        }   
                                        else if (!RuntimeHelpers.IsReferenceOrContainsReferences<T>())
                                        {
                                            reader.UnsafeRead(out T value);
                                            return value;
                                        }
                                        
                                        throw new Exception($"Deserializer not found for type {typeof(T).FullName}");
                                    }

                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    public static object Deserialize(ReadOnlySpan<byte> data, Type type)
                                    {
                                        var reader = new Reader(data);
                                        return DeserializeBoxed(ref reader, type);
                                    }
                                    
                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    private static object DeserializeBoxed(ref Reader reader, Type type)
                                    {
                                        if (!_deserializers.TryGetValue(type.TypeHandle.Value, out var deserializer))
                                        {
                                            throw new Exception($"Deserializer not found for type {type.FullName}, if this is an unmanaged type, please use Deserialize<T>(ref Reader reader) instead.");
                                        }
                                    
                                        return deserializer.DeserializeBoxed(ref reader);
                                    }
                            {{sb}}    }
                            }
                            """;

        spc.AddSource($"{curNamespace}.Deserializer.Generic.g.cs", genericCode);
    }
}