using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Nino.Generator.Collection;
using Nino.Generator.Metadata;
using Nino.Generator.Template;

namespace Nino.Generator.Common;

public partial class SerializerGenerator(
    Compilation compilation,
    NinoGraph ninoGraph,
    List<NinoType> ninoTypes,
    List<ITypeSymbol> potentialTypes)
    : NinoCommonGenerator(compilation, ninoGraph, ninoTypes)
{
    private void GenerateGenericRegister(StringBuilder sb, string name, HashSet<ITypeSymbol> generatedTypes)
    {
        sb.AppendLine($$"""
                                private static void Register{{name}}Serializers()
                                {
                        """);
        foreach (var type in generatedTypes)
        {
            // no non-ninotyped unmanaged types
            if (type.IsUnmanagedType)
            {
                if (!NinoGraph.TypeMap.ContainsKey(type))
                    continue;
            }

            // no ref struct types
            if (type.IsRefStruct())
                continue;
            var typeFullName = type.GetDisplayString();
            sb.AppendLine($$"""
                                        _serializers[typeof({{typeFullName}}).TypeHandle.Value] = new CachedSerializer<{{typeFullName}}>(Serialize);
                            """);
            sb.AppendLine();
        }

        sb.AppendLine("        }");
        sb.AppendLine();
    }

    protected override void Generate(SourceProductionContext spc)
    {
        var compilation = Compilation;

        StringBuilder sb = new(32_000_000);
        HashSet<ITypeSymbol> collectionTypes = new(SymbolEqualityComparer.Default);
        new CollectionSerializerGenerator(compilation, potentialTypes).Generate(spc, collectionTypes);
        GenerateGenericRegister(sb, "Collection", collectionTypes);

        HashSet<ITypeSymbol> trivialTypes = new(SymbolEqualityComparer.Default);
        GenerateTrivialCode(spc, collectionTypes, trivialTypes);
        // add string type
        trivialTypes.Add(compilation.GetSpecialType(SpecialType.System_String));
        GenerateGenericRegister(sb, "Trivial", trivialTypes);

        var curNamespace = compilation.AssemblyName!.GetNamespace();
        // generate code
        var genericCode = $$"""
                            // <auto-generated/>
                            using System;
                            using global::Nino.Core;
                            using System.Buffers;
                            using System.ComponentModel;
                            using System.Collections.Generic;
                            using System.Collections.Concurrent;
                            using System.Runtime.InteropServices;
                            using System.Runtime.CompilerServices;

                            namespace {{curNamespace}}
                            {
                                public static partial class Serializer
                                {
                                    public delegate void SerializeDelegate<T>(T value, ref Writer writer);
                                    private static Dictionary<IntPtr, ICachedSerializer> _serializers = new();
                                    
                                    private interface ICachedSerializer
                                    {
                                        [MethodImpl(MethodImplOptions.AggressiveInlining)]   
                                        void SerializeBoxed(object value, ref Writer writer);
                                    }
                                    
                                    private class CachedSerializer<T> : ICachedSerializer
                                    {
                                        public static SerializeDelegate<T> Serializer;
                                        
                                        public CachedSerializer(SerializeDelegate<T> serializer)
                                        {
                                            Serializer = serializer;
                                        }
                                        
                                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                        public void SerializeBoxed(object value, ref Writer writer)
                                        {
                                            if (Serializer == null)
                                                throw new Exception($"Serializer not found for type {typeof(T).FullName}");
                                                
                                            if (value == null)
                                            {
                                                writer.Write(TypeCollector.Null);
                                                return;
                                            }
                                            
                                            if (!(value is T val))
                                                throw new Exception($"Cannot cast object to type {typeof(T).FullName}");
                                            
                                            Serializer.Invoke(val, ref writer);
                                        }
                                    }

                                    static Serializer()
                                    {
                                        RegisterTrivialSerializers();
                                        RegisterCollectionSerializers();
                                    }

                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    public static byte[] Serialize<T>(T value)
                                    {
                                        var bufferWriter = GetBufferWriter();
                                        try
                                        {
                                            var writer = new Writer(bufferWriter);
                                            Serialize<T>(value, ref writer);
                                            return bufferWriter.WrittenSpan.ToArray();
                                        }
                                        finally
                                        {
                                            ReturnBufferWriter(bufferWriter);
                                        }
                                    }
                                    
                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    public static void Serialize<T>(T value, INinoBufferWriter bufferWriter)
                                    {
                                        Writer writer = new Writer(bufferWriter);
                                        Serialize<T>(value, ref writer);
                                    }

                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    private static void Serialize<T>(T value, ref Writer writer)
                                    {
                                        var serializer = CachedSerializer<T>.Serializer;
                                        if (serializer != null)
                                        {
                                            serializer.Invoke(value, ref writer);
                                            return;
                                        }    
                                        else if (!RuntimeHelpers.IsReferenceOrContainsReferences<T>())
                                        {
                                            writer.UnsafeWrite(value);
                                            return;
                                        }
                                        
                                        throw new Exception($"Serializer not found for type {typeof(T).FullName}");    
                                    }

                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    public static byte[] Serialize(object value)
                                    {
                                        var bufferWriter = GetBufferWriter();
                                        try
                                        {
                                            var writer = new Writer(bufferWriter);
                                            SerializeBoxed(value, ref writer, value?.GetType());
                                            return bufferWriter.WrittenSpan.ToArray();
                                        }
                                        finally
                                        {
                                            ReturnBufferWriter(bufferWriter);
                                        }
                                    }
                                    
                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    public static void Serialize(object value, INinoBufferWriter bufferWriter)
                                    {
                                        Writer writer = new Writer(bufferWriter);
                                        SerializeBoxed(value, ref writer, value?.GetType());
                                    }

                                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                    private static void SerializeBoxed(object value, ref Writer writer, Type type)
                                    {
                                        if (value == null || type == null)
                                        {
                                            writer.Write(TypeCollector.Null);
                                            return;
                                        }
                                    
                                        if (!_serializers.TryGetValue(type.TypeHandle.Value, out var serializer))
                                        {
                                            throw new Exception($"Serializer not found for type {type.FullName}, if this is an unmanaged type, please use Serialize<T>(T value, ref Writer writer) instead.");
                                        }

                                        serializer.SerializeBoxed(value, ref writer);
                                    }
                            {{sb}}    }
                            }
                            """;

        spc.AddSource($"{curNamespace}.Serializer.Generic.g.cs", genericCode);
    }
}