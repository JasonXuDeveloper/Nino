using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Nino.Generator.Metadata;

namespace Nino.Generator.Common;

public partial class SerializerGenerator
{
    private void GenerateTrivialCode(SourceProductionContext spc, HashSet<ITypeSymbol> validTypes,
        HashSet<ITypeSymbol> generatedTypes)
    {
        var compilation = Compilation;
        var sb = new StringBuilder();
        sb.GenerateClassSerializeMethods("string");
        HashSet<string> generatedTypeNames = new();
        HashSet<ITypeSymbol> validTypeNames = new HashSet<ITypeSymbol>(SymbolEqualityComparer.Default);
        foreach (var type in validTypes)
        {
            validTypeNames.Add(type);
        }

        foreach (var ninoType in NinoTypes)
        {
            try
            {
                if (ninoType.TypeSymbol is INamedTypeSymbol namedType && namedType.IsGenericType)
                {
                    if (namedType.TypeArguments.Any(t => !ValidType(t, validTypeNames)))
                    {
                        continue;
                    }
                }

                if (!ninoType.TypeSymbol.IsUnmanagedType)
                {
                    bool hasInvalidMember = false;
                    foreach (var member in ninoType.Members)
                    {
                        if (ValidType(member.Type, validTypeNames)) continue;

                        spc.ReportDiagnostic(Diagnostic.Create(
                            new DiagnosticDescriptor("NINO001", "Nino Generator",
                                "Nino cannot find suitable serializer for member type '{0}' in type '{1}'",
                                "Nino.Generator",
                                DiagnosticSeverity.Error, true),
                            member.MemberSymbol.Locations.First(),
                            member.Type.GetDisplayString(), ninoType.TypeSymbol.GetDisplayString()));
                        hasInvalidMember = true;
                    }

                    if (hasInvalidMember) continue;
                }

                if (!generatedTypes.Add(ninoType.TypeSymbol))
                    continue;
                if (!generatedTypeNames.Add(ninoType.TypeSymbol.GetDisplayString()))
                    continue;

                if (!ninoType.TypeSymbol.IsInstanceType() ||
                    !string.IsNullOrEmpty(ninoType.CustomSerializer))
                    continue;
                sb.AppendLine();
                sb.AppendLine($$"""
                                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                        [EditorBrowsable(EditorBrowsableState.Never)]
                                        [System.Diagnostics.DebuggerNonUserCode]
                                        [System.Runtime.CompilerServices.CompilerGenerated]
                                        public static void SerializeImpl({{ninoType.TypeSymbol.GetTypeFullName()}} value, ref Writer writer)
                                        {
                                """);

                if (ninoType.IsPolymorphic())
                {
                    sb.AppendLine(
                        $"            writer.Write(NinoTypeConst.{ninoType.TypeSymbol.GetTypeFullName().GetTypeConstName()});");
                }

                if (ninoType.TypeSymbol.IsUnmanagedType)
                {
                    sb.AppendLine("            writer.Write(value);");
                }
                else
                {
                    WriteMembers(ninoType, "value", sb, validTypes);
                }

                sb.AppendLine("        }");
                sb.AppendLine();
            }
            catch (Exception e)
            {
                sb.AppendLine($"/* Error: {e.Message} for type {ninoType.TypeSymbol.GetTypeFullName()}");
                //add stacktrace
                foreach (var line in e.StackTrace.Split('\n'))
                {
                    sb.AppendLine($" * {line}");
                }

                //end error
                sb.AppendLine(" */");
            }
        }

        var curNamespace = compilation.AssemblyName!.GetNamespace();

        // generate code
        var code = $$"""
                     // <auto-generated/>

                     using System;
                     using System.Buffers;
                     using System.Threading;
                     using global::Nino.Core;
                     using System.ComponentModel;
                     using System.Collections.Generic;
                     using System.Collections.Concurrent;
                     using System.Runtime.InteropServices;
                     using System.Runtime.CompilerServices;

                     namespace {{curNamespace}}
                     {
                         public static partial class Serializer
                         {
                             private static readonly ConcurrentQueue<NinoArrayBufferWriter> BufferWriters = new();

                             private static readonly NinoArrayBufferWriter DefaultBufferWriter = new NinoArrayBufferWriter(1024);
                             private static int _defaultUsed;

                             [MethodImpl(MethodImplOptions.AggressiveInlining)]
                             public static NinoArrayBufferWriter GetBufferWriter()
                             {
                                 // Fast path
                                 if (Interlocked.CompareExchange(ref _defaultUsed, 1, 0) == 0)
                                 {
                                     return DefaultBufferWriter;
                                 }

                                 if (BufferWriters.Count == 0)
                                 {
                                     return new NinoArrayBufferWriter(1024);
                                 }

                                 if (BufferWriters.TryDequeue(out var bufferWriter))
                                 {
                                     return bufferWriter;
                                 }

                                 return new NinoArrayBufferWriter(1024);
                             }

                             [MethodImpl(MethodImplOptions.AggressiveInlining)]
                             public static void ReturnBufferWriter(NinoArrayBufferWriter bufferWriter)
                             {
                     #if NET8_0_OR_GREATER
                                 bufferWriter.ResetWrittenCount();
                     #else
                                 bufferWriter.Clear();
                     #endif
                                 // Check if the buffer writer is the default buffer writer
                                 if (bufferWriter == DefaultBufferWriter)
                                 {
                                     // Ensure it is in use, otherwise throw an exception
                                     if (Interlocked.CompareExchange(ref _defaultUsed, 0, 1) == 0)
                                     {
                                         throw new InvalidOperationException("The returned buffer writer is not in use.");
                                     }

                                     return;
                                 }

                                 BufferWriters.Enqueue(bufferWriter);
                             }
                             
                             [MethodImpl(MethodImplOptions.AggressiveInlining)]
                             public static byte[] Serialize(bool value)
                             {
                                 if (value)
                                     return new byte[1] { 1 };
                                
                                 return new byte[1] { 0 };
                             }
                             
                             [MethodImpl(MethodImplOptions.AggressiveInlining)]
                             public static byte[] Serialize(byte value)
                             {
                                 return new byte[1] { value };
                             }

                     {{GenerateWriterAccessMethodBody("string", "        ")}}

                     {{sb}}    }
                     }
                     """;

        spc.AddSource($"{curNamespace}.Serializer.g.cs", code);
    }

    private static string GenerateWriterAccessMethodBody(string typeName, string indent = "",
        string typeParam = "",
        string genericConstraint = "")
    {
        var ret = $$"""
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static void Serialize{{typeParam}}({{typeName}} value, ref Writer writer) {{genericConstraint}}
                    {
                        writer.Write(value);
                    }
                    """;

        // indent
        ret = ret.Replace("\n", $"\n{indent}");
        return $"{indent}{ret}";
    }

    private void WriteMembers(NinoType type, string valName, StringBuilder sb, HashSet<ITypeSymbol> validTypes)
    {
        List<string> valNames = new();
        foreach (var members in type.GroupByPrimitivity())
        {
            valNames.Clear();
            foreach (var member in members)
            {
                var name = member.Name;
                var isPrivate = member.IsPrivate;
                var isProperty = member.IsProperty;
                var val = $"{valName}.{name}";

                if (isPrivate)
                {
                    var accessName = valName;
                    if (type.TypeSymbol.IsValueType)
                    {
                        accessName = $"ref {valName}";
                    }

                    val = isProperty
                        ? $"PrivateAccessor.__get__{name}__({accessName})"
                        : $"PrivateAccessor.__{name}__({accessName})";
                    var legacyVal = $"{valName}.__nino__generated__{name}";
                    val = $"""

                           #if NET8_0_OR_GREATER
                                                   {val}
                           #else
                                                   {legacyVal}
                           #endif

                           """;
                }

                valNames.Add(val);
            }

            if (members.Count == 1)
            {
                var member = members[0];
                var declaredType = member.Type;
                var val = valNames[0];

                //check if the typesymbol declaredType is string
                if (declaredType.SpecialType == SpecialType.System_String)
                {
                    //check if this member is annotated with [NinoUtf8]
                    var isUtf8 = member.IsUtf8String;

                    sb.AppendLine(
                        isUtf8
                            ? $"            writer.WriteUtf8({val});"
                            : $"            writer.Write({val});");
                }
                else if (declaredType.IsUnmanagedType && 
                         (!NinoGraph.TypeMap.TryGetValue(declaredType.GetDisplayString(), out var ninoType) || !ninoType.IsPolymorphic()))
                {
                    sb.AppendLine(
                        $"            writer.Write({val});");
                }
                else
                {
                    // pre-generated
                    if (validTypes.Contains(declaredType))
                    {
                        sb.AppendLine(
                            $"            Serialize({val}, ref writer);");
                    }
                    // bottom type
                    else if (NinoGraph.TypeMap.TryGetValue(declaredType.GetDisplayString(), out var memberNinoType) &&
                             !NinoGraph.SubTypes.ContainsKey(memberNinoType))
                    {
                        // cross project referenced ninotype
                        if (!string.IsNullOrEmpty(memberNinoType.CustomSerializer))
                        {
                            // for the sake of unity asmdef, fallback to dynamic resolve
                            sb.AppendLine("#if UNITY_2020_3_OR_NEWER");
                            sb.AppendLine(
                                $"            NinoSerializer.Serialize({val}, ref writer);");
                            // net core project
                            sb.AppendLine("#else");
                            sb.AppendLine(
                                $"            {memberNinoType.CustomSerializer}.Serializer.SerializeImpl({val}, ref writer);");
                            sb.AppendLine("#endif");
                        }
                        // the impl is implemented in the same assembly
                        else
                        {
                            sb.AppendLine(
                                $"            SerializeImpl({val}, ref writer);");
                        }
                    }
                    // dynamically resolved type
                    else
                    {
                        sb.AppendLine(
                            $"            NinoSerializer.Serialize({val}, ref writer);");
                    }
                }
            }
            else
            {
                sb.AppendLine($"#if {NinoTypeHelper.WeakVersionToleranceSymbol}");
                foreach (var val in valNames)
                {
                    sb.AppendLine($"            writer.Write({val});");
                }

                sb.AppendLine("#else");
                sb.AppendLine(
                    $"            writer.Write(NinoTuple.Create({string.Join(", ", valNames)}));");
                sb.AppendLine("#endif");
            }
        }
    }
}