/* this is generated by nino */
using System.Runtime.CompilerServices;

namespace Nino.UnitTests
{
    public partial struct A
    {
        public static A.SerializationHelper NinoSerializationHelper = new A.SerializationHelper();
        public unsafe class SerializationHelper: Nino.Serialization.NinoWrapperBase<A>
        {
            #region NINO_CODEGEN
            public SerializationHelper()
            {
                int ret = 1;
                ret += sizeof(System.Int32);
                Nino.Serialization.Serializer.SetFixedSize<Nino.UnitTests.A>(ret);
            }
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override void Serialize(A value, ref Nino.Serialization.Writer writer)
            {
                
                writer.Write(true);
                writer.Write(value.Val);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override A Deserialize(Nino.Serialization.Reader reader)
            {
                if(!reader.ReadBool())
                    return default;
                A value = new A();
                value.Val = reader.Read<System.Int32>(sizeof(System.Int32));
                return value;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override int GetSize(A value)
            {
                
                return Nino.Serialization.Serializer.GetFixedSize<Nino.UnitTests.A>();
            }
            #endregion
        }
    }
}