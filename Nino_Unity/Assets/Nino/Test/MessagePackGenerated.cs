// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(14)
            {
                { typeof(global::Nino.Test.Data[]), 0 },
                { typeof(global::Nino.Test.NotIncludeAllClass[]), 1 },
                { typeof(global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, global::Nino.Test.NotIncludeAllClass>), 2 },
                { typeof(global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, int>), 3 },
                { typeof(global::System.Collections.Generic.Dictionary<string, global::Nino.Test.NotIncludeAllClass>), 4 },
                { typeof(global::System.Collections.Generic.Dictionary<string, int>), 5 },
                { typeof(global::System.Collections.Generic.List<global::Nino.Test.NotIncludeAllClass>), 6 },
                { typeof(global::System.Collections.Generic.List<int>), 7 },
                { typeof(global::Nino.Test.TestEnum), 8 },
                { typeof(global::Nino.Test.BuildTestDataCodeGen), 9 },
                { typeof(global::Nino.Test.BuildTestDataNoCodeGen), 10 },
                { typeof(global::Nino.Test.Data), 11 },
                { typeof(global::Nino.Test.NestedData), 12 },
                { typeof(global::Nino.Test.NotIncludeAllClass), 13 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Nino.Test.Data>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::Nino.Test.NotIncludeAllClass>();
                case 2: return new global::MessagePack.Formatters.DictionaryFormatter<global::Nino.Test.NotIncludeAllClass, global::Nino.Test.NotIncludeAllClass>();
                case 3: return new global::MessagePack.Formatters.DictionaryFormatter<global::Nino.Test.NotIncludeAllClass, int>();
                case 4: return new global::MessagePack.Formatters.DictionaryFormatter<string, global::Nino.Test.NotIncludeAllClass>();
                case 5: return new global::MessagePack.Formatters.DictionaryFormatter<string, int>();
                case 6: return new global::MessagePack.Formatters.ListFormatter<global::Nino.Test.NotIncludeAllClass>();
                case 7: return new global::MessagePack.Formatters.ListFormatter<int>();
                case 8: return new MessagePack.Formatters.Nino.Test.TestEnumFormatter();
                case 9: return new MessagePack.Formatters.Nino.Test.BuildTestDataCodeGenFormatter();
                case 10: return new MessagePack.Formatters.Nino.Test.BuildTestDataNoCodeGenFormatter();
                case 11: return new MessagePack.Formatters.Nino.Test.DataFormatter();
                case 12: return new MessagePack.Formatters.Nino.Test.NestedDataFormatter();
                case 13: return new MessagePack.Formatters.Nino.Test.NotIncludeAllClassFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nino.Test
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class TestEnumFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nino.Test.TestEnum>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nino.Test.TestEnum value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Byte)value);
        }

        public global::Nino.Test.TestEnum Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nino.Test.TestEnum)reader.ReadByte();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nino.Test
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class BuildTestDataCodeGenFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nino.Test.BuildTestDataCodeGen>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Nino.Test.BuildTestDataCodeGen value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(22);
            writer.Write(value.a);
            writer.Write(value.b);
            writer.Write(value.c);
            writer.Write(value.d);
            writer.Write(value.e);
            writer.Write(value.f);
            writer.Write(value.g);
            writer.Write(value.h);
            writer.Write(value.i);
            writer.Write(value.j);
            formatterResolver.GetFormatterWithVerify<decimal>().Serialize(ref writer, value.k, options);
            writer.Write(value.l);
            writer.Write(value.m);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.n, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.o, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Nino.Test.NotIncludeAllClass>>().Serialize(ref writer, value.p, options);
            writer.Write(value.q);
            formatterResolver.GetFormatterWithVerify<global::Nino.Test.NotIncludeAllClass[]>().Serialize(ref writer, value.r, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Nino.Test.NotIncludeAllClass>>().Serialize(ref writer, value.s, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, int>>().Serialize(ref writer, value.t, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.u, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, global::Nino.Test.NotIncludeAllClass>>().Serialize(ref writer, value.v, options);
        }

        public global::Nino.Test.BuildTestDataCodeGen Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Nino.Test.BuildTestDataCodeGen();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.a = reader.ReadByte();
                        break;
                    case 1:
                        ____result.b = reader.ReadSByte();
                        break;
                    case 2:
                        ____result.c = reader.ReadInt16();
                        break;
                    case 3:
                        ____result.d = reader.ReadUInt16();
                        break;
                    case 4:
                        ____result.e = reader.ReadInt32();
                        break;
                    case 5:
                        ____result.f = reader.ReadUInt32();
                        break;
                    case 6:
                        ____result.g = reader.ReadInt64();
                        break;
                    case 7:
                        ____result.h = reader.ReadUInt64();
                        break;
                    case 8:
                        ____result.i = reader.ReadSingle();
                        break;
                    case 9:
                        ____result.j = reader.ReadDouble();
                        break;
                    case 10:
                        ____result.k = formatterResolver.GetFormatterWithVerify<decimal>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        ____result.l = reader.ReadBoolean();
                        break;
                    case 12:
                        ____result.m = reader.ReadChar();
                        break;
                    case 13:
                        ____result.n = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        ____result.o = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        ____result.p = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Nino.Test.NotIncludeAllClass>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        ____result.q = reader.ReadBytes()?.ToArray();
                        break;
                    case 17:
                        ____result.r = formatterResolver.GetFormatterWithVerify<global::Nino.Test.NotIncludeAllClass[]>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        ____result.s = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Nino.Test.NotIncludeAllClass>>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        ____result.t = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, int>>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        ____result.u = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        ____result.v = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, global::Nino.Test.NotIncludeAllClass>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BuildTestDataNoCodeGenFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nino.Test.BuildTestDataNoCodeGen>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Nino.Test.BuildTestDataNoCodeGen value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(22);
            writer.Write(value.a);
            writer.Write(value.b);
            writer.Write(value.c);
            writer.Write(value.d);
            writer.Write(value.e);
            writer.Write(value.f);
            writer.Write(value.g);
            writer.Write(value.h);
            writer.Write(value.i);
            writer.Write(value.j);
            formatterResolver.GetFormatterWithVerify<decimal>().Serialize(ref writer, value.k, options);
            writer.Write(value.l);
            writer.Write(value.m);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.n, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.o, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Nino.Test.NotIncludeAllClass>>().Serialize(ref writer, value.p, options);
            writer.Write(value.q);
            formatterResolver.GetFormatterWithVerify<global::Nino.Test.NotIncludeAllClass[]>().Serialize(ref writer, value.r, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Nino.Test.NotIncludeAllClass>>().Serialize(ref writer, value.s, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, int>>().Serialize(ref writer, value.t, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.u, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, global::Nino.Test.NotIncludeAllClass>>().Serialize(ref writer, value.v, options);
        }

        public global::Nino.Test.BuildTestDataNoCodeGen Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Nino.Test.BuildTestDataNoCodeGen();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.a = reader.ReadByte();
                        break;
                    case 1:
                        ____result.b = reader.ReadSByte();
                        break;
                    case 2:
                        ____result.c = reader.ReadInt16();
                        break;
                    case 3:
                        ____result.d = reader.ReadUInt16();
                        break;
                    case 4:
                        ____result.e = reader.ReadInt32();
                        break;
                    case 5:
                        ____result.f = reader.ReadUInt32();
                        break;
                    case 6:
                        ____result.g = reader.ReadInt64();
                        break;
                    case 7:
                        ____result.h = reader.ReadUInt64();
                        break;
                    case 8:
                        ____result.i = reader.ReadSingle();
                        break;
                    case 9:
                        ____result.j = reader.ReadDouble();
                        break;
                    case 10:
                        ____result.k = formatterResolver.GetFormatterWithVerify<decimal>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        ____result.l = reader.ReadBoolean();
                        break;
                    case 12:
                        ____result.m = reader.ReadChar();
                        break;
                    case 13:
                        ____result.n = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        ____result.o = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        ____result.p = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Nino.Test.NotIncludeAllClass>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        ____result.q = reader.ReadBytes()?.ToArray();
                        break;
                    case 17:
                        ____result.r = formatterResolver.GetFormatterWithVerify<global::Nino.Test.NotIncludeAllClass[]>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        ____result.s = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Nino.Test.NotIncludeAllClass>>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        ____result.t = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, int>>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        ____result.u = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        ____result.v = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Nino.Test.NotIncludeAllClass, global::Nino.Test.NotIncludeAllClass>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nino.Test.Data>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Nino.Test.Data value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            writer.WriteNil();
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
            writer.Write(value.f);
            formatterResolver.GetFormatterWithVerify<decimal>().Serialize(ref writer, value.d, options);
            writer.Write(value.db);
            writer.Write(value.bo);
            formatterResolver.GetFormatterWithVerify<global::Nino.Test.TestEnum>().Serialize(ref writer, value.en, options);
        }

        public global::Nino.Test.Data Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Nino.Test.Data();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        ____result.x = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.y = reader.ReadInt16();
                        break;
                    case 3:
                        ____result.z = reader.ReadInt64();
                        break;
                    case 4:
                        ____result.f = reader.ReadSingle();
                        break;
                    case 5:
                        ____result.d = formatterResolver.GetFormatterWithVerify<decimal>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.db = reader.ReadDouble();
                        break;
                    case 7:
                        ____result.bo = reader.ReadBoolean();
                        break;
                    case 8:
                        ____result.en = formatterResolver.GetFormatterWithVerify<global::Nino.Test.TestEnum>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NestedDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nino.Test.NestedData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Nino.Test.NestedData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<global::Nino.Test.Data[]>().Serialize(ref writer, value.ps, options);
        }

        public global::Nino.Test.NestedData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Nino.Test.NestedData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.ps = formatterResolver.GetFormatterWithVerify<global::Nino.Test.Data[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NotIncludeAllClassFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nino.Test.NotIncludeAllClass>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Nino.Test.NotIncludeAllClass value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.a);
            writer.Write(value.b);
            writer.Write(value.c);
            writer.Write(value.d);
        }

        public global::Nino.Test.NotIncludeAllClass Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Nino.Test.NotIncludeAllClass();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.a = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.b = reader.ReadInt64();
                        break;
                    case 2:
                        ____result.c = reader.ReadSingle();
                        break;
                    case 3:
                        ____result.d = reader.ReadDouble();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

